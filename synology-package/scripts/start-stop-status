#!/bin/sh

case $1 in
    start)
        ### Start this package.
        echo 'try to run docker mega container.' >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
        container_id=$(docker run -d -p 7900:6080 -v "${SYNOPKG_PKGDEST_VOL}/MEGAsync":"/home/mega/MEGA/" johnshine/mega.syno:latest)
        ret=$?
        if [ $ret -eq 0 ]; then
            echo $container_id > "${SYNOPKG_PKGDEST}/package/logs/cid"
            echo "start with ${container_id}" >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
        fi
        echo "return $ret" >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
        exit $ret
    ;;
    stop)
        ### Stop this package.
        echo 'try to stop mega container.' >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
        container_id=$(cat "${SYNOPKG_PKGDEST}/package/logs/cid")
        if [ -z $container_id ]; then
            echo 'fail to get package container id.' >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
            exit 1
        fi
        docker stop $container_id >> "${SYNOPKG_PKGDEST}/package/logs/output.log" 2>&1
        exit $?
    ;;
    log)
        echo "${SYNOPKG_PKGDEST}/package/logs/output.log"
    ;;
    status)
        ### Check package alive.
        echo 'get status of mega container.' >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
        container_id=$(cat "${SYNOPKG_PKGDEST}/package/logs/cid")
        if [ -z $container_id ]; then
            echo 'fail to get package container id.' >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
            exit 1
        fi
        docker ps --no-trunc -q | grep $container_id >> "${SYNOPKG_PKGDEST}/package/logs/output.log" 2>&1
        ret=$?
        if [ $ret -ne 0 ]; then
            echo 'mega container is not running' >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
        else
            echo 'mega container is running' >> "${SYNOPKG_PKGDEST}/package/logs/output.log"
        fi
        exit $ret
    ;;
    *)
        exit 0
    ;;
esac

